{
  "name": "octokit",
  "version": "0.9.9",
  "description": "Javascript github client for nodejs or a web browser using promises",
  "main": "octokit.js",
  "scripts": {
    "prepublish": "bower install",
    "test": "grunt test --verbose",
    "dist": "grunt dist --verbose",
    "update": "bower update"
  },
  "dependencies": {
    "grunt": "~0.4.1",
    "bower": "~1.0",
    "underscore": ">=1.4.2",
    "jquery-deferred": ">=0.3.0",
    "najax": "git://github.com/philschatz/najax.git"
  },
  "devDependencies": {
    "docco": "~0.4.0",
    "grunt-coffeelint": "~0.0.7",
    "grunt-bump": "~0.0.10",
    "grunt-contrib-coffee": "~0.7",
    "grunt-contrib-clean": "~0.5",
    "jamjs": "~0.2.17"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/philschatz/octokit.js.git"
  },
  "keywords": [
    "javascript",
    "github",
    "client",
    "promise",
    "ender"
  ],
  "jam": {
    "dependencies": {
      "jquery": ">=1.8",
      "lodash": ">=1.0"
    }
  },
  "author": {
    "name": "Philip Schatz"
  },
  "readme": "# octokit.js\n\noctokit.js provides a minimal higher-level wrapper around git's [plumbing commands](http://git-scm.com/book/en/Git-Internals-Plumbing-and-Porcelain),\nexposing an API for manipulating GitHub repositories, users, groups, and gists.\nIt is being developed in the context of [github-book](http://github.com/philschatz/github-book), an EPUB3 editor for GitHub.\n\nThis package can also be used in `nodejs` or as an AMD module in the browser.\n\n## Key Features\n\n- Works in `nodejs`, a AMD module in the browser, a [bower](https://github.com/bower/bower) library\n- Simple `read` and `write` methods for text and binary files\n- Creating gists, Pull Requests, forks, and new Repositories\n- `ETag` Caching\n- Promises instead of callbacks (for better error-handling and progress updating)\n- Progress Notifications for multistep operations\n- Starring and Following repositories, users, and organizations\n- Editing Team and Organization Membership\n- User/Org/Repo events and notifications\n- Listeners for rate limit changes\n- Public Keys\n- Hooks (commit, comment, etc)\n\n\n## Usage\n\nAll asynchronous methods return a [Common-JS Promise](http://wiki.commonjs.org/wiki/Promises/A).\nSee [jQuery.Deferred](http://api.jquery.com/category/deferred-object/) or\n[Node's Q](https://github.com/kriskowal/q) for more information.\n\n### In a browser without requirejs\n\nCreate an Octokit instance.\n\n```js\nvar gh = new Octokit({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\"\n});\n```\n\nOr if you prefer OAuth, it looks like this:\n\n```js\nvar gh = new Octokit({\n  token: \"OAUTH_TOKEN\"\n});\n```\n\n### In a browser using requirejs\n\n```js\ndefine(['octokit'], function(Octokit) {\n  var gh = new Octokit({\n    username: \"YOU_USER\",\n    password: \"YOUR_PASSWORD\"\n  });\n});\n```\n\n### In Nodejs\n\nInstall instructions:\n\n    npm install octokit --save\n\n```js\nvar Octokit = require('octokit');\nvar gh = Octokit.new({\n  username: \"YOU_USER\",\n  password: \"YOUR_PASSWORD\"\n});\n```\n\n### Using bower\n\nThis file can be included using the bower package manager:\n\n    bower install octokit --save\n\n\n## Repository API\n\n\n```js\nvar repo = gh.getRepo(username, reponame);\n```\n\nShow repository information\n\n```js\nrepo.getInfo()\n.done(function(repo) {})\n.fail(function(err) {});\n```\n\nList all branches in a Repository\n\n```js\nrepo.getBranches()\n.done(function(branches) {});\n```\n\nFork a repository\n\n```js\nrepo.fork()\n.done(function() {});\n```\n\nCreate a Pull Request\n\n```js\nrepo.createPullRequest()\n.done(function() {});\n```\n\nGet recent commits to the repository\n\n```js\nvar options = {};\nrepo.getCommits(options)\n.done(function(commits) {});\n```\n\nList Repository events\n\n```js\nrepo.getEvents()\n.done(function(events) {});\n```\n\nList Issue events for the repository\n\n```js\nrepo.getIssueEvents()\n.done(function(events) {});\n```\n\nList events for a network of Repositories\n\n```js\nrepo.getNetworkEvents()\n.done(function(events) {});\n```\n\nList unread notifications for authenticated user pertaining to this repository\n\n```js\nvar options = {};\nrepo.getNotifications(options)\n.done(function(events) {});\n```\n\nGet programming language counts (CoffeeScript, Ruby, Shell)\n\n```js\nrepo.getLanguages()\n.done(function(events) {});\n```\n\n\n### Branch API\n\nAdditional methods are available for a specific branch in a repository\n\nGet the Default branch of a repository\n\n```js\nvar branch = repo.getDefaultBranch();\n```\n\nGet a specific branch of a repository\n\n```js\nvar branch = repo.getBranch(\"BRANCH_NAME\");\n```\n\nRead a file from the branch\n\n```js\nvar isBinary = false;\nbranch.read('PATH/TO/FILE.txt', isBinary)\n.done(function(contents) {})\n.fail(function(err) {});\n```\n\nRemove a file from the branch\n\n```js\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nbranch.remove('PATH/TO/FILE.txt', message)\n.done(function() {});\n```\n\nRead the contents (raw) of a file or directory\n\n```js\nbranch.contents('DIRECTORY/PATH')\n.done(function(contents) {});\n```\n\nor\n\n```js\nbranch.contents('DIRECTORY/PATH/FILE.txt')\n.done(function(contents) {});\n```\n\nMove a file\n\n```js\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nbranch.move('PATH/TO/FILE.txt', 'NEW/PATH/TO/FILE.txt', message)\n.done(function() {});\n```\n\nWrite a file (update or add)\n\n```js\nvar content = \"Contents of the file\";\nvar message = \"OPTIONAL COMMIT MESSAGE\";\nvar isBinary = false;\nbranch.write('PATH/TO/FILE.txt', content, message, isBinary)\n.done(function() {});\n```\n\nWrite multiple files (update or add) in one commit\n\n```js\nvar contents = {\n  \"FILE1.txt\": \"Contents of the file\",\n  \"FILE2.txt\": {isBase64: true, content: \"BASE_64_ENCODED_STRING\"}\n}\nbranch.write(contents, message)\n.done(function() {});\n```\n\nGet recent commits to a branch\n\n```js\nvar options = {};\nbranch.getCommits(options)\n.done(function(commits) {});\n```\n\nCreate a new branch\n\n```js\nbranch.createBranch(\"new-branch-name\")\n.done(function() {});\n```\n\n\n### Low-level Repo API\n\nThe methods on a branch or repo use the following low-level methods.\n\n```js\nrepo.git.getRef(...)      .done(function(result) {});\nrepo.git.createRef(...)   .done(function(result) {});\nrepo.git.deleteRef(...)   .done(function(result) {});\nrepo.git.getBranches()    .done(function(result) {});\nrepo.git.getBlob(...)     .done(function(result) {});\nrepo.git.getSha(...)      .done(function(result) {});\nrepo.git.getTree(...)     .done(function(result) {});\nrepo.git.postBlob(...)    .done(function(result) {});\nrepo.git.updateTree(...)  .done(function(result) {});\nrepo.git.postTree(...)    .done(function(result) {});\nrepo.git.commit(...)      .done(function(result) {});\nrepo.git.updateHead(...)  .done(function(result) {});\nrepo.git.getCommits(...)  .done(function(result) {});\n```\n\n\n## User API\n\n\n```js\nvar user = gh.getUser(\"ANY_GITHUB_USERNAME\");\n```\n\nShow user information for a particular user. Also works for organizations.\n\n```js\nuser.getInfo()\n.done(function(user) {})\n.fail(function(err) {});\n```\n\nList public repositories for a particular user.\n\n```js\nuser.getRepos()\n.done(function(repos) {});\n```\n\nList organizations the user is in.\n\n```js\nuser.getOrgs()\n.done(function(orgs) {});\n```\n\nList all gists of a particular user.\n\n```js\nuser.getGists()\n.done(function(gists) {});\n```\n\nList users following this user.\n\n```js\nuser.getFollowers()\n.done(function(users) {});\n```\n\nList users this user is following.\n\n```js\nuser.getFollowing()\n.done(function(users) {});\n```\n\nGet Received events for this user.\n\n```js\nuser.getReceivedEvents()\n.done(function(events) {});\n```\n\nGet all events for this user.\n\n```js\nuser.getEvents()\n.done(function(events) {});\n```\n\n\n## Authenticated User API\n\nThe Authenticated User contains the following methods in addition to all the methods in the **User API**.\n\nGet the authenticated user.\n\n```js\nvar user = gh.getUser();\n```\n\nList unread notifications for the user.\n\n```js\ngh.getNotifications()\n.done(function(notifications) {})\n.fail(function(err) {});\n```\n\nList private and public repositories of the current authenticated user.\n\n```js\nuser.getRepos()\n.done(function(repos) {});\n```\n\nFollow another user.\n\n```js\nvar username \"SOME_OTHER_USERNAME\";\nuser.follow(username)\n.done(function(orgs) {});\n```\n\nStop following another user.\n\n```js\nvar username \"SOME_OTHER_USERNAME\";\nuser.unfollow(username)\n.done(function(orgs) {});\n```\n\n\n## Gist API\n\n```js\nvar gist = gh.getGist(3165654);\n```\n\nRead the contents of a Gist.\n\n```js\ngist.read()\n.done(function(gist) {});\n```\n\nUpdate the contents of a Gist. Please consult the documentation on [GitHub](http://developer.github.com/v3/gists/).\n\n```js\nvar delta = {\n  \"description\": \"the description for this gist\",\n  \"files\": {\n    \"file1.txt\": {\n      \"content\": \"updated file contents\"\n    },\n    \"old_name.txt\": {\n      \"filename\": \"new_name.txt\",\n      \"content\": \"modified contents\"\n    },\n    \"new_file.txt\": {\n      \"content\": \"a new file\"\n    },\n    \"delete_this_file.txt\": null\n  }\n};\n\ngist.update(delta)\n.done(function(gist) {});\n```\n\nCreate a Gist\n\n```js\nvar files = {\n  'file1.txt': {content: 'String file contents'}\n};\n\ngh.getGist().create(files)\n.done(function(gist) {});\n```\n\nDelete the Gist\n\n```js\ngist.delete()\n.done(function(gist) {});\n```\n\nFork the Gist\n\n```js\ngist.fork()\n.done(function(gist) {});\n```\n\nStar the Gist\n\n```js\ngist.star()\n.done(function() {});\n```\n\nUnstar the Gist\n\n```js\ngist.unstar()\n.done(function() {});\n```\n\nCheck if the Gist is starred\n\n```js\ngist.isStarred()\n.done(function() {});\n```\n\n\n## Miscellaneous methods\n\nRetreive a zen message (to test the API works).\n\n```js\ngh.getZen()\n.done(function(msg) {})\n.fail(function(err) {});\n```\n\nAdd a listener for `rateLimit` changes\n\n```js\nfunction listener(rateLimitRemaining, rateLimit, method, path, data, raw, isBase64) {\n  // ...\n};\ngh.onRateLimitChanged(listener);\n```\n\nList repositories for a particular organization. Includes private repositories if you are authorized.\n\n```js\ngh.getOrgRepos(orgname)\n.done(function(repos) {});\n```\n\n## Progress Notifications\n\nFor multistep operations users can listen to updates by registering a listener at `promise.progress(function(obj) {})`.\n\nFor more details see jQuery's [deferred.progress documentation](http://api.jquery.com/deferred.progress/).\n\n\n\n##Setup\n\n`github-client` has the following dependencies:\n\n- Underscore\n- Base64 (for basic auth or binary files). You can leave this if you are not using basic auth or binary files.\n\nIf you are not using NodeJS or requireJS include these before `github-client`:\n\n```\n<script src=\"lib/underscore-min.js\">\n<script src=\"lib/base64.js\">\n```\n\n## Change Log\n\n\n### 0.7.X\n\nSwitched to a native `request` implementation (thanks @mattpass). Adds support for GitHub gists, forks and pull requests.\n\n### 0.6.X\n\nAdds support for organizations and fixes an encoding issue.\n\n### 0.5.X\n\nSmart caching of latest commit sha.\n\n### 0.4.X\n\nAdded support for [OAuth](http://developer.github.com/v3/oauth/).\n\n### 0.3.X\n\nSupport for Moving and removing files.\n\n### 0.2.X\n\nConsider commit messages.\n\n### 0.1.X\n\nInitial version.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/philschatz/octokit.js/issues"
  },
  "homepage": "https://github.com/philschatz/octokit.js",
  "_id": "octokit@0.9.9",
  "_from": "octokit@"
}
